"use client"

import { useState } from "react"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Separator } from "@/components/ui/separator"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ScrollArea } from "@/components/ui/scroll-area"
import { AlertTriangle, Bug, CheckCircle, Clock, Eye, FileText, Play, RefreshCw, Target, Zap } from "lucide-react"

interface Vulnerability {
  id: string
  cve: string
  title: string
  description: string
  severity: "critical" | "high" | "medium" | "low"
  cvss: number
  affected_package: string
  version: string
  fixed_version?: string
  agent: string
  detected_at: string
  status: "open" | "patched" | "mitigated" | "false_positive"
  category: string
}

interface ScanProgress {
  agent: string
  progress: number
  status: "scanning" | "completed" | "failed"
  vulnerabilities_found: number
}

const mockVulnerabilities: Vulnerability[] = [
  {
    id: "vuln-001",
    cve: "CVE-2024-3094",
    title: "XZ Utils Backdoor Vulnerability",
    description: "Malicious code in XZ Utils library allowing remote code execution",
    severity: "critical",
    cvss: 9.8,
    affected_package: "xz-utils",
    version: "5.6.0",
    fixed_version: "5.6.1",
    agent: "web-server-01",
    detected_at: "2025-01-19T10:30:00Z",
    status: "open",
    category: "Remote Code Execution",
  },
  {
    id: "vuln-002",
    cve: "CVE-2024-21626",
    title: "runc Container Escape Vulnerability",
    description: "Container escape vulnerability in runc allowing privilege escalation",
    severity: "high",
    cvss: 8.6,
    affected_package: "runc",
    version: "1.1.5",
    fixed_version: "1.1.12",
    agent: "web-server-01",
    detected_at: "2025-01-19T10:25:00Z",
    status: "open",
    category: "Privilege Escalation",
  },
  {
    id: "vuln-003",
    cve: "CVE-2024-0727",
    title: "OpenSSL Denial of Service",
    description: "Processing a maliciously formatted PKCS12 file may lead to denial of service",
    severity: "medium",
    cvss: 5.5,
    affected_package: "openssl",
    version: "3.0.2",
    fixed_version: "3.0.13",
    agent: "db-server-01",
    detected_at: "2025-01-19T10:20:00Z",
    status: "mitigated",
    category: "Denial of Service",
  },
  {
    id: "vuln-004",
    cve: "CVE-2024-1086",
    title: "Linux Kernel Use-After-Free",
    description: "Use-after-free vulnerability in netfilter subsystem",
    severity: "high",
    cvss: 7.8,
    affected_package: "linux-kernel",
    version: "6.1.0",
    fixed_version: "6.1.76",
    agent: "backup-server-01",
    detected_at: "2025-01-19T10:15:00Z",
    status: "patched",
    category: "Memory Corruption",
  },
  {
    id: "vuln-005",
    cve: "CVE-2024-2961",
    title: "glibc Buffer Overflow",
    description: "Buffer overflow in iconv() function when processing invalid multi-byte sequences",
    severity: "medium",
    cvss: 6.9,
    affected_package: "glibc",
    version: "2.35",
    fixed_version: "2.39",
    agent: "web-server-01",
    detected_at: "2025-01-19T10:10:00Z",
    status: "open",
    category: "Buffer Overflow",
  },
  {
    id: "vuln-006",
    cve: "CVE-2024-6387",
    title: "OpenSSH Remote Code Execution",
    description: "Signal handler race condition in OpenSSH server leading to RCE",
    severity: "critical",
    cvss: 9.8,
    affected_package: "openssh-server",
    version: "8.9p1",
    fixed_version: "9.8p1",
    agent: "db-server-01",
    detected_at: "2025-01-19T10:05:00Z",
    status: "open",
    category: "Remote Code Execution",
  },
]

export default function VulnerabilityAnalysis() {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>(mockVulnerabilities)
  const [isScanning, setIsScanning] = useState(false)
  const [scanProgress, setScanProgress] = useState<ScanProgress[]>([])
  const [lastScan, setLastScan] = useState(new Date(Date.now() - 3600000)) // 1 hour ago
  const [selectedSeverity, setSelectedSeverity] = useState<string>("all")

  const startVulnerabilityScan = async () => {
    setIsScanning(true)

    const agents = ["web-server-01", "db-server-01", "backup-server-01", "mail-server-01"]
    const initialProgress = agents.map((agent) => ({
      agent,
      progress: 0,
      status: "scanning" as const,
      vulnerabilities_found: 0,
    }))

    setScanProgress(initialProgress)

    // Simulate scanning progress
    for (let i = 0; i <= 100; i += 10) {
      await new Promise((resolve) => setTimeout(resolve, 300))

      setScanProgress((prev) =>
        prev.map((scan) => ({
          ...scan,
          progress: Math.min(i + Math.random() * 10, 100),
          vulnerabilities_found: Math.floor((i / 100) * (Math.random() * 5 + 1)),
        })),
      )
    }

    // Complete scan
    setScanProgress((prev) =>
      prev.map((scan) => ({
        ...scan,
        progress: 100,
        status: "completed" as const,
        vulnerabilities_found: Math.floor(Math.random() * 3 + 1),
      })),
    )

    // Add some new vulnerabilities
    setTimeout(() => {
      const newVulns: Vulnerability[] = [
        {
          id: `vuln-${Date.now()}`,
          cve: "CVE-2024-NEW1",
          title: "Newly Discovered Vulnerability",
          description: "Recently discovered security vulnerability requiring immediate attention",
          severity: Math.random() > 0.5 ? "high" : "medium",
          cvss: Math.random() * 4 + 5,
          affected_package: "example-package",
          version: "1.0.0",
          fixed_version: "1.0.1",
          agent: agents[Math.floor(Math.random() * agents.length)],
          detected_at: new Date().toISOString(),
          status: "open",
          category: "Security Update",
        },
      ]

      setVulnerabilities((prev) => [...newVulns, ...prev])
      setLastScan(new Date())
      setIsScanning(false)
    }, 1000)
  }

  const getSeverityColor = (severity: string) => {
    const colors = {
      critical: "text-red-500 bg-red-500/10 border-red-500/20",
      high: "text-orange-500 bg-orange-500/10 border-orange-500/20",
      medium: "text-yellow-500 bg-yellow-500/10 border-yellow-500/20",
      low: "text-green-500 bg-green-500/10 border-green-500/20",
    }
    return colors[severity as keyof typeof colors] || colors.medium
  }

  const getStatusColor = (status: string) => {
    const colors = {
      open: "text-red-500 bg-red-500/10 border-red-500/20",
      patched: "text-green-500 bg-green-500/10 border-green-500/20",
      mitigated: "text-blue-500 bg-blue-500/10 border-blue-500/20",
      false_positive: "text-gray-500 bg-gray-500/10 border-gray-500/20",
    }
    return colors[status as keyof typeof colors] || colors.open
  }

  const filteredVulnerabilities = vulnerabilities.filter(
    (vuln) => selectedSeverity === "all" || vuln.severity === selectedSeverity,
  )

  const severityCounts = {
    critical: vulnerabilities.filter((v) => v.severity === "critical").length,
    high: vulnerabilities.filter((v) => v.severity === "high").length,
    medium: vulnerabilities.filter((v) => v.severity === "medium").length,
    low: vulnerabilities.filter((v) => v.severity === "low").length,
    total: vulnerabilities.length,
  }

  const openVulnerabilities = vulnerabilities.filter((v) => v.status === "open").length

  return (
    <div className="space-y-6">
      {/* Vulnerability Overview */}
      <Card className="border-slate-800 bg-slate-950/50 backdrop-blur-sm">
        <CardHeader className="pb-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Bug className="h-5 w-5 text-red-500" />
              <div>
                <CardTitle className="text-base">Vulnerability Analysis</CardTitle>
                <CardDescription className="text-slate-400 text-sm">
                  Wazuh-powered vulnerability detection and assessment
                </CardDescription>
              </div>
            </div>
            <Button onClick={startVulnerabilityScan} disabled={isScanning} className="bg-cyan-600 hover:bg-cyan-700">
              {isScanning ? <RefreshCw className="h-4 w-4 mr-2 animate-spin" /> : <Play className="h-4 w-4 mr-2" />}
              {isScanning ? "Scanning..." : "Start Scan"}
            </Button>
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Scan Status */}
          {isScanning && (
            <div className="space-y-3">
              <h4 className="text-sm font-medium">Scan Progress</h4>
              {scanProgress.map((scan) => (
                <div key={scan.agent} className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-slate-400">{scan.agent}</span>
                    <div className="flex items-center gap-2">
                      <span className="text-xs text-slate-500">{scan.vulnerabilities_found} found</span>
                      <span className="text-xs text-slate-500">{Math.round(scan.progress)}%</span>
                    </div>
                  </div>
                  <Progress value={scan.progress} className="h-2" />
                </div>
              ))}
              <Separator className="bg-slate-800" />
            </div>
          )}

          {/* Statistics */}
          <div className="grid grid-cols-2 sm:grid-cols-5 gap-4">
            <div className="flex items-center gap-3 p-3 rounded-lg bg-slate-900/50">
              <Target className="h-6 w-6 text-slate-400" />
              <div>
                <p className="text-xs text-slate-400">Total</p>
                <p className="text-lg font-bold">{severityCounts.total}</p>
              </div>
            </div>
            <div className="flex items-center gap-3 p-3 rounded-lg bg-red-500/10">
              <AlertTriangle className="h-6 w-6 text-red-500" />
              <div>
                <p className="text-xs text-red-400">Critical</p>
                <p className="text-lg font-bold text-red-500">{severityCounts.critical}</p>
              </div>
            </div>
            <div className="flex items-center gap-3 p-3 rounded-lg bg-orange-500/10">
              <Zap className="h-6 w-6 text-orange-500" />
              <div>
                <p className="text-xs text-orange-400">High</p>
                <p className="text-lg font-bold text-orange-500">{severityCounts.high}</p>
              </div>
            </div>
            <div className="flex items-center gap-3 p-3 rounded-lg bg-yellow-500/10">
              <Clock className="h-6 w-6 text-yellow-500" />
              <div>
                <p className="text-xs text-yellow-400">Medium</p>
                <p className="text-lg font-bold text-yellow-500">{severityCounts.medium}</p>
              </div>
            </div>
            <div className="flex items-center gap-3 p-3 rounded-lg bg-green-500/10">
              <CheckCircle className="h-6 w-6 text-green-500" />
              <div>
                <p className="text-xs text-green-400">Low</p>
                <p className="text-lg font-bold text-green-500">{severityCounts.low}</p>
              </div>
            </div>
          </div>

          <div className="flex items-center justify-between text-sm">
            <span className="text-slate-400">Last scan: {lastScan.toLocaleString()}</span>
            <span className="text-slate-400">
              <span className="text-red-500 font-medium">{openVulnerabilities}</span> open vulnerabilities
            </span>
          </div>
        </CardContent>
      </Card>

      {/* Vulnerability Details */}
      <Card className="border-slate-800 bg-slate-950/50 backdrop-blur-sm">
        <CardHeader className="pb-3">
          <CardTitle className="text-base">Vulnerability Details</CardTitle>
          <Tabs defaultValue="all" className="w-full">
            <TabsList className="grid w-full grid-cols-5 bg-slate-900">
              <TabsTrigger
                value="all"
                onClick={() => setSelectedSeverity("all")}
                className="data-[state=active]:bg-slate-800 data-[state=active]:text-cyan-500 text-xs"
              >
                All ({severityCounts.total})
              </TabsTrigger>
              <TabsTrigger
                value="critical"
                onClick={() => setSelectedSeverity("critical")}
                className="data-[state=active]:bg-slate-800 data-[state=active]:text-red-500 text-xs"
              >
                Critical ({severityCounts.critical})
              </TabsTrigger>
              <TabsTrigger
                value="high"
                onClick={() => setSelectedSeverity("high")}
                className="data-[state=active]:bg-slate-800 data-[state=active]:text-orange-500 text-xs"
              >
                High ({severityCounts.high})
              </TabsTrigger>
              <TabsTrigger
                value="medium"
                onClick={() => setSelectedSeverity("medium")}
                className="data-[state=active]:bg-slate-800 data-[state=active]:text-yellow-500 text-xs"
              >
                Medium ({severityCounts.medium})
              </TabsTrigger>
              <TabsTrigger
                value="low"
                onClick={() => setSelectedSeverity("low")}
                className="data-[state=active]:bg-slate-800 data-[state=active]:text-green-500 text-xs"
              >
                Low ({severityCounts.low})
              </TabsTrigger>
            </TabsList>
          </Tabs>
        </CardHeader>
        <CardContent>
          <ScrollArea className="h-[400px]">
            <div className="space-y-3">
              {filteredVulnerabilities.map((vuln) => (
                <div
                  key={vuln.id}
                  className="p-4 rounded-lg bg-slate-900/30 hover:bg-slate-900/50 transition-colors border border-slate-800"
                >
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-2">
                        <Badge variant="outline" className={getSeverityColor(vuln.severity)}>
                          {vuln.severity.toUpperCase()}
                        </Badge>
                        <Badge variant="outline" className="text-slate-400 border-slate-600">
                          {vuln.cve}
                        </Badge>
                        <Badge variant="outline" className={getStatusColor(vuln.status)}>
                          {vuln.status.replace("_", " ").toUpperCase()}
                        </Badge>
                      </div>
                      <h4 className="font-medium text-sm mb-1">{vuln.title}</h4>
                      <p className="text-xs text-slate-400 mb-2">{vuln.description}</p>
                      <div className="grid grid-cols-2 sm:grid-cols-4 gap-2 text-xs">
                        <div>
                          <span className="text-slate-500">CVSS:</span>
                          <span className="ml-1 font-medium">{vuln.cvss}</span>
                        </div>
                        <div>
                          <span className="text-slate-500">Package:</span>
                          <span className="ml-1 font-medium">{vuln.affected_package}</span>
                        </div>
                        <div>
                          <span className="text-slate-500">Version:</span>
                          <span className="ml-1 font-medium">{vuln.version}</span>
                        </div>
                        <div>
                          <span className="text-slate-500">Agent:</span>
                          <span className="ml-1 font-medium">{vuln.agent}</span>
                        </div>
                      </div>
                      {vuln.fixed_version && (
                        <div className="mt-2 text-xs">
                          <span className="text-slate-500">Fixed in:</span>
                          <span className="ml-1 font-medium text-green-400">{vuln.fixed_version}</span>
                        </div>
                      )}
                    </div>
                    <div className="flex items-center gap-2 ml-4">
                      <Button variant="ghost" size="icon" className="h-8 w-8">
                        <Eye className="h-4 w-4" />
                      </Button>
                      <Button variant="ghost" size="icon" className="h-8 w-8">
                        <FileText className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                  <div className="flex items-center justify-between text-xs text-slate-500">
                    <span>Detected: {new Date(vuln.detected_at).toLocaleString()}</span>
                    <span>Category: {vuln.category}</span>
                  </div>
                </div>
              ))}
            </div>
          </ScrollArea>
        </CardContent>
      </Card>
    </div>
  )
}
